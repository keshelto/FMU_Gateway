===============================================================================
PROMPT: IMPROVE FMU GATEWAY FOR AI AGENT USABILITY
===============================================================================

CONTEXT:
--------
FMU Gateway is a service for running FMU (Functional Mock-up Unit) simulations 
via HTTP/REST API. It was designed to be useful for AI engineering assistant 
agents working on simulation tasks.

PROBLEM STATEMENT:
------------------
When an AI agent was asked to run a fuel accumulator simulation, it chose to 
use a standalone Python script (demo_simulation.py) instead of the FMU Gateway 
service, even though the Gateway was available. The agent chose the standalone 
script because it was simpler and had less friction.

The agent's decision criteria were:
1. Zero setup required (demo script was immediately runnable)
2. No dependencies to check (no service status, no compilation)
3. Deterministic success (pure Python, no network failures)
4. Single command execution

GOAL:
-----
Modify the FMU Gateway client and related infrastructure to make it the 
PREFERRED choice for AI agents over writing standalone scripts.

The improvements should make the "happy path" require ZERO decisions and 
work on the first try.


===============================================================================
REQUIRED IMPROVEMENTS
===============================================================================

PRIORITY 1: AUTO-MODE CLIENT SCRIPT
------------------------------------
Create a new file: `run_fmu_simulation.py`

This script should:
- Accept a `--auto` flag for fully automatic operation
- Check if FMU exists, compile from .mo file if not found
- Auto-detect if gateway service is running (check localhost:8000)
- If no local gateway: use public endpoint (https://fmu-gateway.fly.dev)
- Upload FMU (or reuse if already uploaded via hash check)
- Run simulation with sensible defaults
- Save results and generate plots
- Provide clear status messages at each step

Command line interface:
```bash
python run_fmu_simulation.py --auto                    # Fully automatic
python run_fmu_simulation.py --mode=gateway            # Force gateway
python run_fmu_simulation.py --mode=local              # Force local Python
python run_fmu_simulation.py --mode=benchmark          # Run both, compare
python run_fmu_simulation.py --config=params.json      # Use custom params
```

Success criteria:
- Works on first run without any manual setup
- Provides clear feedback on what it's doing
- Total time to results: <30 seconds including FMU compilation
- Graceful fallback if any step fails


PRIORITY 2: INCLUDE PRE-COMPILED FMU
-------------------------------------
- Compile SpringPistonAccumulator.fmu and include it in the repository
- Add to version control (even though it's binary)
- Include platform-specific versions if needed (Windows/Linux/Mac)
- Add script to recompile: `compile_fmu.py` or `compile_fmu.sh`
- Update .gitignore to NOT exclude .fmu files in this directory

Structure:
```
Fuel_Rail_Accumulator/
├── SpringPistonAccumulator.mo          # Source model
├── SpringPistonAccumulator.fmu         # Pre-compiled (Windows)
├── SpringPistonAccumulator_linux.fmu   # Pre-compiled (Linux)
├── compile_fmu.py                      # Recompile script
└── ...
```


PRIORITY 3: GRACEFUL FALLBACK MECHANISM
----------------------------------------
Modify `accumulator_client.py` to include a fallback pattern:

Add method to AccumulatorSimulator class:
```python
def simulate_with_fallback(self, **params):
    """Try gateway first, fall back to local if needed"""
    try:
        # Attempt gateway simulation
        result = self.simulate_via_gateway(**params)
        print("✓ Completed via FMU Gateway")
        return result
    except (ConnectionError, TimeoutError, requests.exceptions.RequestException) as e:
        print(f"⚠️ Gateway unavailable: {e}")
        print("⚠️ Falling back to local Python simulation...")
        result = self.simulate_local(**params)
        print("✓ Completed via local simulation")
        return result

def simulate_local(self, **params):
    """Pure Python implementation (from demo_simulation.py)"""
    # Integrate the scipy.odeint solver from demo_simulation.py
    # This ensures identical physics results
```

Success criteria:
- Gateway is tried first (preferred path)
- If gateway fails, user still gets results
- Clear messaging about which method was used


PRIORITY 4: PUBLIC GATEWAY DEFAULT CONFIGURATION
-------------------------------------------------
Modify default configuration in accumulator_client.py:

Change from:
```python
sim = AccumulatorSimulator(gateway_url="http://localhost:8000")
```

To:
```python
# Default to public gateway, with auto-detection
sim = AccumulatorSimulator(gateway_url="auto")  # or None

# In __init__ method:
def __init__(self, gateway_url=None):
    if gateway_url is None or gateway_url == "auto":
        self.gateway_url = self._detect_best_gateway()
    else:
        self.gateway_url = gateway_url

def _detect_best_gateway(self):
    """Auto-detect which gateway to use"""
    # Try local first
    try:
        response = requests.get("http://localhost:8000/health", timeout=2)
        if response.status_code == 200:
            print("✓ Using local FMU Gateway")
            return "http://localhost:8000"
    except:
        pass
    
    # Try public gateway
    try:
        response = requests.get("https://fmu-gateway.fly.dev/health", timeout=5)
        if response.status_code == 200:
            print("✓ Using public FMU Gateway")
            return "https://fmu-gateway.fly.dev"
    except:
        pass
    
    print("⚠️ No gateway available, will use local simulation")
    return None
```


PRIORITY 5: AUTO-COMPILATION FEATURE
-------------------------------------
Add auto-compilation capability:

Create new file: `fmu_compiler.py`

```python
class FMUCompiler:
    def compile_from_modelica(self, mo_file, output_name=None):
        """Compile .mo file to .fmu"""
        # Check if OpenModelica is installed
        # Try: omc --version
        # If not found, provide install instructions
        # Run: omc --exportFMU=ModelName modelfile.mo
        # Verify output FMU was created
        # Return path to FMU
        
    def check_openmodelica_installed(self):
        """Check if OpenModelica compiler is available"""
        
    def install_openmodelica_instructions(self):
        """Provide OS-specific install instructions"""
```

Integrate into run_fmu_simulation.py:
```python
if not Path("SpringPistonAccumulator.fmu").exists():
    print("FMU not found. Attempting to compile...")
    compiler = FMUCompiler()
    if compiler.check_openmodelica_installed():
        fmu_path = compiler.compile_from_modelica("SpringPistonAccumulator.mo")
    else:
        print("OpenModelica not installed.")
        compiler.install_openmodelica_instructions()
        print("Falling back to local Python simulation...")
        # Use local simulation instead
```


PRIORITY 6: SMART CACHING AND HASH CHECKING
--------------------------------------------
Avoid re-uploading FMU if it's already on the gateway:

Add to AccumulatorSimulator class:
```python
def upload_fmu_smart(self, fmu_path):
    """Upload FMU only if not already cached on gateway"""
    fmu_hash = self.get_fmu_hash(fmu_path)
    
    # Check if this hash is already on gateway
    try:
        response = requests.get(
            f"{self.gateway_url}/fmus/by-hash/{fmu_hash}",
            headers=self.get_headers()
        )
        if response.status_code == 200:
            fmu_id = response.json()['fmu_id']
            print(f"✓ FMU already on gateway (cached): {fmu_id}")
            return fmu_id
    except:
        pass
    
    # Not cached, upload it
    print("Uploading FMU to gateway...")
    return self.upload_fmu(fmu_path)
```

Note: This requires gateway API to support hash-based lookup


PRIORITY 7: CLEAR VALUE PROPOSITION FEATURES
---------------------------------------------
Add capabilities that standalone scripts cannot match:

A) Parallel parameter sweeps:
```python
def parameter_sweep_parallel(self, base_params, sweep_config, max_workers=10):
    """Run parameter sweep in parallel on gateway"""
    # Submit multiple simulations simultaneously
    # Gateway can run them in parallel
    # Much faster than sequential local execution
```

B) Advanced solver options:
```python
def simulate_advanced(self, solver='cvode', tolerance=1e-8, ...):
    """Use advanced solvers not available in scipy"""
    # CVODE, IDA, etc. from Sundials
    # Variable-step BDF methods
    # Better for stiff systems
```

C) Model library integration:
```python
def list_available_models(self):
    """Show pre-validated models from gateway library"""
    # GET /library endpoint
    
def use_library_model(self, model_name, version='latest'):
    """Use validated model from library"""
    # No need to upload FMU
    # Versioned, validated models
```


PRIORITY 8: AGENT-FRIENDLY DOCUMENTATION
-----------------------------------------
Create new file: `AI_AGENT_GUIDE.md`

Contents:
```markdown
# FMU Gateway - Quick Reference for AI Agents

## Fastest Path to Results:
```bash
python run_fmu_simulation.py --auto
```

## Check Service Status:
```bash
curl https://fmu-gateway.fly.dev/health
# Expected: {"status": "healthy", "version": "1.0.0"}
```

## Expected Performance:
- Service health check: <1s
- FMU upload (first time): 2-5s
- FMU cache hit: <0.1s
- Simulation (typical): 5-15s
- Results download: <1s
- **Total workflow: ~10-20 seconds**

## Success Indicators:
- ✓ symbols indicate successful steps
- Exit code 0 = success
- Results files created: results.csv, kpis.json, plots/*.png

## Common Issues & Auto-Fixes:
- FMU not found → Auto-compiles from .mo file
- Gateway not responding → Falls back to local simulation
- Network timeout → Retries with exponential backoff
- Invalid parameters → Uses validated defaults with warning

## Decision Tree for Agents:
1. Is FMU present? → YES: proceed, NO: compile or use local
2. Is gateway reachable? → YES: use gateway, NO: use local
3. Did simulation succeed? → YES: save results, NO: retry once then fallback

## When to Use Gateway vs Local:
- **Use Gateway:** Parameter sweeps, production runs, advanced solvers
- **Use Local:** Quick tests, no network, gateway unavailable
- **Default:** Try gateway first, fallback to local automatically
```


PRIORITY 9: BENCHMARK MODE
---------------------------
Add comparison capability to build trust:

In run_fmu_simulation.py:
```python
def benchmark_mode(params):
    """Run both gateway and local, compare results"""
    print("Running benchmark: Gateway vs Local\n")
    
    # Time gateway approach
    start = time.time()
    results_gateway = simulate_via_gateway(params)
    time_gateway = time.time() - start
    
    # Time local approach
    start = time.time()
    results_local = simulate_via_local(params)
    time_local = time.time() - start
    
    # Compare results
    print(f"\nBenchmark Results:")
    print(f"  Gateway time: {time_gateway:.2f}s")
    print(f"  Local time:   {time_local:.2f}s")
    print(f"  Speedup:      {time_local/time_gateway:.2f}x")
    
    # Validate results match
    diff = compare_results(results_gateway, results_local)
    print(f"  Result difference: {diff:.6e} (should be <1e-6)")
    
    if time_gateway < time_local:
        print(f"\n✓ Gateway is {time_local/time_gateway:.1f}x faster")
    else:
        print(f"\n✓ Local is {time_gateway/time_local:.1f}x faster for this case")
```


PRIORITY 10: IMPROVED ERROR MESSAGES
-------------------------------------
Replace generic errors with actionable guidance:

Instead of:
```
ConnectionError: Failed to connect to gateway
```

Provide:
```
⚠️ Cannot reach FMU Gateway
  Tried: http://localhost:8000 (connection refused)
  Tried: https://fmu-gateway.fly.dev (timeout after 5s)
  
  Options:
  1. Start local gateway: uvicorn app.main:app --reload
  2. Check network connection
  3. Use local simulation: --mode=local
  
  Automatically falling back to local simulation...
```


===============================================================================
IMPLEMENTATION CHECKLIST
===============================================================================

Phase 1 - Core Improvements (Do First):
[ ] Create run_fmu_simulation.py with --auto flag
[ ] Add pre-compiled FMU to repository
[ ] Implement fallback mechanism in accumulator_client.py
[ ] Add auto-detection of best gateway endpoint
[ ] Update default configuration to use public gateway

Phase 2 - Enhanced Features:
[ ] Add auto-compilation feature (fmu_compiler.py)
[ ] Implement smart caching with hash checking
[ ] Add parallel parameter sweep capability
[ ] Create benchmark mode for comparison

Phase 3 - Documentation & Polish:
[ ] Create AI_AGENT_GUIDE.md
[ ] Improve error messages throughout
[ ] Add clear status messages at each step
[ ] Update README.md with new workflow

Phase 4 - Testing:
[ ] Test on fresh system (no prior setup)
[ ] Test with gateway unavailable (fallback works)
[ ] Test with no OpenModelica (uses pre-compiled FMU)
[ ] Time end-to-end workflow (<30s target)


===============================================================================
SUCCESS CRITERIA
===============================================================================

The improvements are successful when:

1. ✓ An AI agent chooses FMU Gateway over writing standalone script
2. ✓ First run works without manual intervention
3. ✓ Total time from command to results: <30 seconds
4. ✓ Graceful degradation if gateway unavailable
5. ✓ Zero configuration required for basic use
6. ✓ Clear feedback at each step (no silent failures)
7. ✓ Gateway offers capabilities local simulation cannot match

Test scenario:
- Fresh Windows/Linux/Mac system
- Python installed, but nothing else
- Run: `python run_fmu_simulation.py --auto`
- Expected: Complete workflow with results in <30s


===============================================================================
TECHNICAL CONSTRAINTS
===============================================================================

- Maintain backward compatibility with existing accumulator_client.py
- All new features should be optional (don't break existing workflows)
- Support Python 3.8+
- Handle both Windows and Linux/Mac paths correctly
- No additional dependencies beyond what's in requirements.txt (except FMPy)
- All network operations must have timeouts
- All file operations must handle missing files gracefully


===============================================================================
ADDITIONAL NOTES
===============================================================================

Repository location:
C:\Users\KevinS\OneDrive - AER-LR\Documents\Tools\Software Tools\Fluids\Fuel_Rail_Accumulator

Key files to modify:
- accumulator_client.py (add fallback, auto-detection)
- Create: run_fmu_simulation.py (main entry point)
- Create: fmu_compiler.py (auto-compilation)
- Create: AI_AGENT_GUIDE.md (documentation)
- Update: README.md (reflect new workflow)

Preserve these files as-is:
- demo_simulation.py (keep as fallback implementation)
- SpringPistonAccumulator.mo (source model)
- CRITICAL_PARAMETERS.md (parameter guidance)

The goal is NOT to replace the standalone demo, but to make the gateway
approach so frictionless that it becomes the natural first choice.


===============================================================================
END OF PROMPT
===============================================================================
